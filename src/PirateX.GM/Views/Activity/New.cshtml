@using PirateX.GMSDK
@using PirateX.GMSDK.Mapping

@{
    ViewBag.Title = "New";
}

@{
    IGMUIItemMap map = ViewBag.ItemMap;
}


<div class="">
    @*<div class="card-header bg-light">
            @map.Name
        </div>*@
    @using (Html.BeginForm("New", "Activity", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form" }))
    {
        <div class="alert alert-dismissible alert-secondary">
            @map.Des
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">×</span>
            </button>
        </div>

        <div class="form-group">
            <label>备注名（必须唯一）</label>
            @Html.TextBox("Remark", null, new { @class = "form-control" })
        </div>

        {
            IEnumerable<IGrouping<string, IGMUIPropertyMap>> groups = ViewBag.Groups;
            var length = groups.Count();
            var rowcount = (length % 3 == 0) ? length / 3 : (length / 3) + 1;

            for (var i = 0; i < rowcount; i++)
            {
                var list = groups.Skip(i * 3).Take(3);
                <div class="row">
                    @foreach (var item in list)
                    {
                        @ConvertToCard(item.Key ?? "基础配置", item.AsEnumerable<IGMUIPropertyMap>())
                    }
                </div>
            }
        }

        <button type="button" class="btn btn-block btn-primary">提交并保存</button>
    }


</div>

@helper ConvertToCard(string headerText, IEnumerable<IGMUIPropertyMap> maps)
    {
        <div class="@ViewBag.ColClass">
            <div class="card">
                <div class="card-header bg-light">
                    @headerText

                    <div class="card-actions">
                        <a href="#" class="btn">
                            <i class="fa fa-copy"></i>
                        </a>
                    </div>
                </div>

                <div class="card-body">
                    @foreach (var subItem in maps.OrderBy(x => x.OrderId))
        {
            @ConvertToGMUI(subItem, true)
}
                </div>
            </div>
        </div>
}

@helper ConvertToGMUI(IGMUIPropertyMap info, bool showlable = false)
    {
        if (info is GMUITextBoxPropertyMap)
        {
            <div class="form-group">
                @if (showlable)
                {
                    <label class="form-control-label">@info.DisplayName</label>
                }

                @Html.TextBox(@info.Name, null, new { @class = "form-control" })
            </div>
        }
        else if (info is GMUIDropdownPropertyMap)
        {
            <div class="form-group">
                @if (showlable)
                {
                    <label class="form-control-label">@info.DisplayName</label>
                }

                @Html.DropDownList(@info.Name, ((GMUIDropdownPropertyMap)info).ListDataProvider.GetListItems().Select(item => new SelectListItem { Text = item.Text, Value = item.Value }), new { @class = "form-control" })
            </div>
        }
        else if (info is GMUIMapPropertyMap)
        {
            foreach (var subItem in (info as GMUIMapPropertyMap).Map.PropertyMaps)
            {
                @ConvertToGMUI(subItem, true)
            }
        }
        else if (info is GMUICheckBoxPropertyMap)
        {
            <div class="form-group">
                @if (showlable)
                {
                    <label class="form-control-label">@info.DisplayName</label>
                }

                @foreach (var subitem in (info as GMUICheckBoxPropertyMap).CheckedDataProvider.GetCheckedItems())
                {
                    <input type="checkbox" value="@subitem.Value" checked="@subitem.Checked"> @subitem.Text
                }

            </div>
        }
        else
        {
            <span>控件没有实现！！！</span>
        }
}
